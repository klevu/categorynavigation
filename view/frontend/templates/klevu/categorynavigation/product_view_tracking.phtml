<?php /** @var \Klevu\Categorynavigation\Block\Product\View $block */ ?>
<?php if ($block->isExtensionConfigured() && $block->getCurrentController() == 'category') { ?>
	<?php $jsonTrackingData = $block->getJsonTrackingData();?>
    <?php if ($block->checkPreserveLayout() && $jsonTrackingData) { ?>
        <?php $isSecure = $block->getRequest()->isSecure();
        $protocol = ($isSecure) ? 'https://' : 'http://'; ?>
        <?php $p_num = is_numeric($block->getRequest()->getParam('p')) ? intval($block->getRequest()->getParam('p')) : 0; ?>
        <script type="text/javascript">
            var already_reported;
            var array_difference;
            var klevu_cat_current_version = '<?php echo $block->getModuleInfo(); ?>';
            var klevu_search_product_tracking = <?php echo $jsonTrackingData; ?>;					
			if(klevu_search_product_tracking.klevu_categoryName !== null){		 
				klevu_search_product_tracking.klevu_categoryName= encodeURIComponent(klevu_search_product_tracking.klevu_categoryName);
			}	
			if(klevu_search_product_tracking.klevu_categoryPath !== null){		
				klevu_search_product_tracking.klevu_categoryPath= encodeURIComponent(klevu_search_product_tracking.klevu_categoryPath);
			}
            var hours = 24; // Reset when storage is more than 24hours
            var now = new Date().getTime();
            var setupTime = localStorage.getItem('setupTime');
            if (setupTime == null) {
                localStorage.setItem('setupTime', now)
            } else {
                if(now-setupTime > hours*60*60*1000) {
                    localStorage.removeItem("categories");
                    localStorage.removeItem("klevu_cat_productIds_" + encodeURIComponent(klevu_search_product_tracking.klevu_categoryName) );
                    localStorage.setItem('setupTime', now);
                }
            }


            function productViewTracking() {
                try {
                    var category_product_ids = document.querySelectorAll("div[data-product-id]");
                    let product_ids = [];
                    for (var i = 0; i < category_product_ids.length; i++) {
                        if (category_product_ids[i].dataset) {
                            product_ids.push(category_product_ids[i].dataset.productId);
                        }
                    }

                    if (category_product_ids.length > 0 ) {

                        var p = parseInt('<?php echo $p_num;?>');
                        klevu_search_product_tracking.klevu_productIds = product_ids.join();

                        if ('undefined' === typeof already_reported || already_reported !== klevu_search_product_tracking.klevu_productIds) {
                            if('undefined' === typeof already_reported) {
                                klevu_pageStartsFrom = 0;
                                sessionStorage.setItem("product_per_page", product_ids.length);
                            } else {
                                if (already_reported) {
                                    //a = klevu_search_product_tracking.klevu_productIds.split(",");
                                    bb = already_reported.split(",");
                                    klevu_pageStartsFrom = bb.length;
                                }
                            }

                            if (p) {
                                klevu_pageStartsFrom = (p - 1) * sessionStorage.getItem("product_per_page");
                            }
                            if (already_reported) {
                                a = already_reported.split(",");
                                b = klevu_search_product_tracking.klevu_productIds.split(",");

                                if(b.length > a.length){
                                    if(arrayContainsArray(b,a)){
                                        var array_difference = jQuery(b).not(a).get();
                                        klevu_search_product_tracking.klevu_productIds = array_difference.join();
                                        a = jQuery.merge( a, b );
                                    } else {
                                        klevu_search_product_tracking.klevu_productIds = b.join();
                                        a = b;

                                    }
                                    // newly added to fix multiple call
                                    already_reported = b.join();
                                } else {
                                    if(a.join() == b.join() ) {
                                        //dont send anything
                                        klevu_search_product_tracking.klevu_productIds = '';
                                    } else {
                                        klevu_search_product_tracking.klevu_productIds = b.join();
                                        a = b;
                                        // newly added to fix multiple call
                                        already_reported = b.join();
                                    }
                                }


                            }

                            // newly added to fix multiple call
                            if('undefined' === typeof already_reported) {
                                already_reported = klevu_search_product_tracking.klevu_productIds;
                            }

                            //already_reported = klevu_search_product_tracking.klevu_productIds;


                            klevu_search_product_tracking.klevu_pageStartsFrom = klevu_pageStartsFrom;

                            if(document.getElementById('klevu_loginCustomerEmail')) {
                                klevu_search_product_tracking.klevu_loginCustomerEmail = document.getElementById('klevu_loginCustomerEmail').innerHTML;
                            }

                            if(document.getElementById('klevu_sessionId')) {
                                klevu_search_product_tracking.klevu_sessionId = document.getElementById('klevu_sessionId').innerHTML;
                            }


                            var param = jQuery.param(klevu_search_product_tracking);
                            if(klevu_search_product_tracking.klevu_productIds.length > 0) {
                                jQuery.ajax({
                                    url: '<?php echo $protocol.$block->getCategoryNavigationTrackingUrl($block->getStoreId()) ?>/analytics/categoryProductViewTracking',
                                    type: 'GET',
                                    data: param,
                                    dataType: 'json',
                                    statusCode: {
                                        200: function (data) {
                                            localStorage.setItem("klevu_cat_productIds_" + encodeURIComponent(klevu_search_product_tracking.klevu_categoryName), klevu_search_product_tracking.klevu_productIds);
                                            localStorage.setItem("klevu_page_startsfrom", klevu_pageStartsFrom);
                                        }
                                    },
                                    timeout: 3000,
                                    crossDomain: true
                                });
                            }
                        }
                    }
                } catch (e) {
                    console.log(e);
                }
            }
            require(['jquery'], function () {
                var categories = JSON.parse(localStorage.getItem("categories") || "{}");
                var catname = encodeURIComponent(klevu_search_product_tracking.klevu_categoryName);
                var catpath = encodeURIComponent(klevu_search_product_tracking.klevu_categoryPath);
                var currentUrl = window.location.pathname;
                var category = {'name': catname,'categoryPath': catpath};
                categories[currentUrl] = category;
                localStorage.setItem("categories", JSON.stringify(categories));
            });
            /**
             * Returns TRUE if the first specified array contains all elements
             * from the second one. FALSE otherwise.
             *
             * @param {array} superset
             * @param {array} subset
             *
             * @returns {boolean}
             */
            function arrayContainsArray (superset, subset) {
                if (0 === subset.length) {
                    return false;
                }
                return subset.every(function (value) {
                    return (superset.indexOf(value) >= 0);
                });
            }


            require(['jquery'], productViewTracking);
            require(['jquery'], handleDOMModification);
            var klevutiout = null;
            function handleDOMModification(){
                window.clearTimeout(klevutiout);
                klevutiout = window.setTimeout(productViewTracking, 100);
            };

            if (typeof addEventListener === 'undefined') {
                document.getElementsByTagName("body")[0].attachEvent("DOMSubtreeModified", handleDOMModification);
            } else {
                document.getElementsByTagName("body")[0].addEventListener("DOMSubtreeModified", handleDOMModification);
            }
            sessionStorage.setItem("klevu_product_call_sent",'');
        </script>
    <?php } ?>
<?php } ?>
